import type { GeoExtractorFunc } from './type.ts'
import {getFlagFromCountryCode, tryDecodeURIText} from "../util.ts";


const CITY_HEADER_NAME = 'x-vercel-ip-city';
/**
 * Country of the original client IP as calculated by Vercel Proxy.
 */
const COUNTRY_HEADER_NAME = 'x-vercel-ip-country';
/**
 * Client IP as calculated by Vercel Proxy.
 */
const IP_HEADER_NAME = 'x-real-ip';
/**
 * Latitude of the original client IP as calculated by Vercel Proxy.
 */
const LATITUDE_HEADER_NAME = 'x-vercel-ip-latitude';
/**
 * Longitude of the original client IP as calculated by Vercel Proxy.
 */
const LONGITUDE_HEADER_NAME = 'x-vercel-ip-longitude';
/**
 * Country region of the original client IP calculated by Vercel Proxy.
 *
 * See [docs](https://vercel.com/docs/concepts/edge-network/headers#x-vercel-ip-country-region).
 */
const REGION_HEADER_NAME = 'x-vercel-ip-country-region';
/**
 * The request ID for each request generated by Vercel Proxy.
 */
const REQUEST_ID_HEADER_NAME = 'x-vercel-id';


// see https://vercel.com/guides/geo-ip-headers-geolocation-vercel-functions#how-can-i-use-geolocation-ip-headers
// and https://github.com/vercel/vercel/blob/main/packages/functions/src/headers.ts
export const vercel:GeoExtractorFunc = (headers)=> {
  if(!headers[REQUEST_ID_HEADER_NAME]) {
    return null;
  }
  return {
    reqId: headers[REQUEST_ID_HEADER_NAME],
    ip: headers[IP_HEADER_NAME],
    city: tryDecodeURIText(headers[CITY_HEADER_NAME]),
    // country: ?,
    countryCode: headers[COUNTRY_HEADER_NAME],
    // region: ?,
    regionCode: headers[REGION_HEADER_NAME],
    latitude: headers[LATITUDE_HEADER_NAME],
    longitude: headers[LONGITUDE_HEADER_NAME],
    // continent: ?
    // postalCode: ?
    // metroCode: ?
    // timezone: ?
    // asn: ?
    flag: getFlagFromCountryCode(headers[COUNTRY_HEADER_NAME]),
    // Vercel Edge Network region name
    idcRegion: getRegionFromRequestId(headers[REQUEST_ID_HEADER_NAME]),
  }
}

function getRegionFromRequestId(requestId?: string): string | undefined {
  if (!requestId) {
    return 'dev1';
  }

  // The request ID is in the format of `region::id` or `region1:region2:...::id`.
  return requestId.split(':')[0];
}